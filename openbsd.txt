Openbsd Installation (20GB HDD,4GB memory)

Install,autoinstall, upgrade or shell -> I (Install)
Keyboard layout -> default
hostname -> myopenbsd67
Network em0, vlan0 -> em0
Ipv4 -> dhcp
TPv6 -> none
done

root account password -> munish
sshd start -> yes
Xwindow start -> no

setup user -> nimda
fullname -> nimda
password -> munish

root ssh login-> yes
timezone -> asia/kolkata

Disk ->sd0
whole disk mbr or GPT -> MBR
Auto, edit or create custom

a 650mb /
b 1gb  swap
c 20GB unused
d 917mb /tmp
e 1.3GB /var rw,asynchronous,local,nodev.nosuid
f 2.3GB /usr
g 691mb /usr/X11R6
h 2.5GB /usr/local
i 1.5GB /usr/src
j 5.6GB /usr/obj
k 4.0GB /home


/dev/sd0a on / type ffs (local)
/dev/sd0k on /home type ffs (local, nodev, nosuid)
/dev/sd0d on /tmp type ffs (local, nodev, nosuid)
/dev/sd0f on /usr type ffs (local, nodev)
/dev/sd0g on /usr/X11R6 type ffs (local, nodev)
/dev/sd0h on /usr/local type ffs (local, nodev, wxallowed)
/dev/sd0j on /usr/obj type ffs (local, nodev, nosuid)
/dev/sd0i on /usr/src type ffs (local, nodev, nosuid)
/dev/sd0e on /var type ffs (local, nodev, nosuid)


Install set cd0,disk,http,ntfs,done -> cd0
path ->6.7/amd64

set
bsd, bsd.rd base67.tgz,comp67.tgz,man67.tgz,game57.tgz,
xbas67.tgz,xshzre,tgz,xfonts.tgz,xserv67.tgz

verfification -> continue
Time

Reboot



####################
Apply patch
Install patch
#syspatch 
-c list available
-l list install
-R revert all pacth
-r revert most recent patch


###############

install program

# vi /etc/installurl
https://cdn.openbsd.org/pub/OpenBSD

pkg_add -v  -i mutt 
-v verbose, -i interactive or you can ignore the same.

#pkg_info 
list of package installed

#pkg_add -u 
update all packages

#pkg_info -Q wget
or #pkglocate wget (not working)
to search package


###################
doas is replacement of sudo (for wheel group)
su -
echo "permit nopass keepenv :wheel" > /etc/doas.conf
wheel user can run as
doas su


##############ports

#pkg_add wget
#wget http://ftp.usa.openbsd.org/pub/OpenBSD/$(uname -r)/ports.tar.gz
#wget http://ftp.usa.openbsd.org/pub/OpenBSD/$(uname -r)/SHA256.sig

#signify -C -p /etc/signify/openbsd-67-base.pub -x SHA256.sig ports.tar.gz
verfifed okay

tar -zxvf ports.tar.gz -C /usr/

$ cd /usr/ports
$ ls 

# cd /usr/ports/shells/fish
# make install clean all

error- Fatal: /usr/ports/pobj must be on a wxallowed filesystem (in lang/python/2.7)
/usr to "rw,nodev,wxallowed" in fstab

$pkg_add portslist
$ cd /usr/ports
$ make search key={KEY-WORD-HERE}


############LAMP
Using inbuilt openbsd httpd server
inbuilt httpd -basic webserver that supports FastCGI and TLS. no gzip support (performance issue)
he projects goals can be summarized as follows:

Static files: Serves static files and directories via optional auto-indexing.
FastCGI: Supports asynchronous and direct FastCGI via UNIX socket or TCP/IP.
Secure: Non-optional security by running chrootâ€™ed and with privilege separation by default.
SSL/TLS: Support secure connections via TLS powered by LibreSSL.
Virtual servers: Flexible configuration with support for name- and IP-based virtual servers on IPv4 and IPv6.
Reconfiguration: Reload the running configuration without interruption.
Logging: Supports per-server logging via local access and error files or via syslog.

#cp /etc/examples/httpd.conf /etc


server "example.com" {
        listen on * port 80
        location "/.well-known/acme-challenge/*" {
                root "/acme"
                request strip 2
        }
        location * {
                block return 302 "https://$HTTP_HOST$REQUEST_URI"
        }
}

server "example.com" {
        listen on * tls port 443
        tls {
                certificate "/etc/ssl/example.com.fullchain.pem"
                key "/etc/ssl/private/example.com.key"
        }
        location "/pub/*" {
                directory auto index
        }
        location "/.well-known/acme-challenge/*" {
                root "/acme"
                request strip 2
        }
}
Also
server "www.fastcgi-example.domain" {
    alias "fastcgi-example.domain"
    listen on $ext_ip port 80
    fastcgi socket ":{% port-number %}"
}

change to

#[ MACROS ]
ext_ip = "127.0.0.1"
# ext_ip = "*"      # open to the outside network
# ext_ip = "egress" # open to only the primary IP address of the network interface

# [ GLOBAL CONFIGURATION ]
# none

# [ SERVERS ]
server "default" {
    listen on $ext_ip port 80
    root "/htdocs/my.domain"
}

# [ TYPES ]
types {
    include "/usr/share/misc/mime.types"
}


make dir
 mkdir -p /var/www/htdocs/my.domain/
# chown {% user %}:{% group %} /var/www/htdocs/my.domain # if necessary
$ echo "Hello, world. from OpenBSD httpd" > /var/www/htdocs/my.domain/index.html

# rcctl enable httpd
# cat /etc/rc.conf.local
httpd_flags=
# rcctl start httpd
httpd(ok)
#curl localhost:80



# pkg_add -r mariadb-client mariadb-server 
Readme at /usr/local/share/doc/pkg-readmes/
#rcctl enable mysqld
#mysql_install_db
#rcctl start|stop|restart|check mysqld
verify
#pgrep mysqld
#ps aux | grep mysqld
#netstat -f inet -na | grep 3306
## mysql_secure_installation
unix authentication for linux account or not

edit /etc/my.cnf
bind_address=0.0.0.0
#rcctl restart mysqld

more resource by editing /etc/login.conf
mysqld:\
    :openfiles-cur=1024:\
    :openfiles-max=2048:\
    :tc=daemon:

Edit /etc/rc.conf.local
export MYSQL_HISTFILE=/dev/null   << to remove mysql history

#apt install phpMyAdmin (based on php7.3)
#php php-curl php-mysqli pecl73-mcrypt pecl73-imagick 

 using php7.3
 
 cp /etc/php-7.3.sample/* /etc/php-7.3/.
 OR
 ln -sf /etc/php-7.3.sample/* /etc/php-7.3/. 

>>>>>>>>>>> for apache_httpd
Enable mod_php by symlinking the sample php-7.4.conf to the /var/www/conf/modules directory.
ln -sf /var/www/conf/modules.sample/php-7.3.conf /var/www/conf/modules


Enable php-fpm
#rcctl enable/start   php73_fpm

#nano /etc/httpd
server "default" {
    listen on * port 80
    root "/htdocs/web1"

#types {
#    include "/usr/share/misc/mime.types"
#}

location "*.php*" {
            fastcgi socket "/run/php-fpm.sock"
    }
}


************************************************
Installing webmin

in dependenices
pkg_add -r p5-Authen-NTLM p5-BSD-Resource p5-Crypt-SSLeay p5-HTML-Parser p5-HTML-Tagset p5-IO-Socket-SSL p5-IO-Tty p5-ldap p5-libwww p5-Locale-gettext p5-Net-OpenSSH p5-Net-SSH2 p5-Net-SSLeay p5-Test-Exception p5-XML-Filter-BufferText

perl -MCPAN -e 'install Crypt::UnixCrypt'
perl -MCPAN -e 'install Authen::Libwrap'  (fail due to tcpd.h)
perl -MCPAN -e 'install Authen::Libwrap'  (fail due to tcpd.h)
pkg_add -r p5-DBD-Pg



cd /usr/local/
ftp http://prdownloads.sourceforge.net/webadmin/webmin-1.955.tar.gz
tar zxvf webmin-1.955.tar.gz
cd webmin-1.955
./setup.sh
Webmin > Webmin Configuration > start at boot time - yes

manually
/etc/webmin/start
/etc/webmin/stop

webmin > other > perl modules
from url install 
http://www.cpan.org/authors/id/D/DM/DMUEY/Authen-Libwrap-0.23.tar.gz
http://www.cpan.org/authors/id/G/GA/GAAS/Encode-Locale-1.05.tar.gz
http://www.cpan.org/authors/id/G/GA/GAAS/Net-HTTP-6.06.tar.gz
http://www.cpan.org/authors/id/S/SA/SADAHIRO/String-Multibyte-1.12.tar.gz
*************************************************************************

letengpt