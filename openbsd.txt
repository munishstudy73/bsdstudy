Openbsd Installation (20GB HDD,4GB memory)

Install,autoinstall, upgrade or shell -> I (Install)
Keyboard layout -> default
hostname -> myopenbsd67
Network em0, vlan0 -> em0
Ipv4 -> dhcp
TPv6 -> none
done

root account password -> munish
sshd start -> yes
Xwindow start by xenodm -> no

setup user -> nimda
fullname -> nimda
password -> munish

root ssh login-> yes
timezone -> asia/kolkata

Disk ->sd0
whole disk mbr or GPT -> MBR
Auto, edit or create custom

a 650mb /
b 1gb  swap
c 20GB unused
d 917mb /tmp
e 1.3GB /var rw,asynchronous,local,nodev.nosuid
f 2.3GB /usr
g 691mb /usr/X11R6
h 2.5GB /usr/local
i 1.5GB /usr/src
j 5.6GB /usr/obj
k 4.0GB /home


/dev/sd0a on / type ffs (local)
/dev/sd0k on /home type ffs (local, nodev, nosuid)
/dev/sd0d on /tmp type ffs (local, nodev, nosuid)
/dev/sd0f on /usr type ffs (local, nodev)
/dev/sd0g on /usr/X11R6 type ffs (local, nodev)
/dev/sd0h on /usr/local type ffs (local, nodev, wxallowed)
/dev/sd0j on /usr/obj type ffs (local, nodev, nosuid)
/dev/sd0i on /usr/src type ffs (local, nodev, nosuid)
/dev/sd0e on /var type ffs (local, nodev, nosuid)

E 
R k
size Xg
a
...
q



Install set cd0,disk,http,ntfs,done -> cd0
path ->6.7/amd64

set
bsd, bsd.rd base67.tgz,comp67.tgz,man67.tgz,game57.tgz,
xbas67.tgz,xshzre,tgz,xfonts.tgz,xserv67.tgz

General file sets

    bsd - The kernel (required) [do I need this, if I install bsd.mp?]
    bsd.mp - The multi-processor kernel [required for multi-core CPUs?]
    bsd.rd - The ramdisk kernel [required for upgrades?]
    baseXX.tgz - The base system (required)
    compXX.tgz - The compiler collection, headers and libraries [not needed on a server, right?]
    manXX.tgz - Manual pages [not needed, as they're available online]
    gameXX.tgz - Text-based games [definitely not needed ;-) ]

X11 related file sets

    xbaseXX.tgz - Base libraries and utilities for X11 (requires xshareXX.tgz)
    xshareXX.tgz - X11's man pages, locale settings and includes
    xfontXX.tgz - Fonts used by X11
    xservXX.tgz - X11's X servers (xservXX.tgz set is rarely needed)


verfification -> continue
Time

Reboot



####################
Apply patch
Install patch
#syspatch 
-c list available
-l list install
-R revert all pacth
-r revert most recent patch


###############

install program

# vi /etc/installurl
https://cdn.openbsd.org/pub/OpenBSD

pkg_add -v  -i mutt 
-v verbose, -i interactive or you can ignore the same.

#pkg_info 
list of package installed

#pkg_add -u 
update all packages

#pkg_info -Q wget
or #pkglocate wget (not working)
to search package
############################################
#sysupgrade
update whole system using all data sets
#sysupgrade -n; rm /home/_sysupgrade/xserv66.tgz; reboot (to not upgrade the xserv set).

###################
doas is replacement of sudo (for wheel group)
su -
echo "permit nopass keepenv :wheel" > /etc/doas.conf
wheel user can run as
doas su

###########
Ensure pkg path
echo "https://cdn.openbsd.org/pub/OpenBSD" > /etc/installurl


##############ports

#pkg_add wget
#wget http://ftp.usa.openbsd.org/pub/OpenBSD/$(uname -r)/ports.tar.gz
#wget http://ftp.usa.openbsd.org/pub/OpenBSD/$(uname -r)/SHA256.sig

#signify -C -p /etc/signify/openbsd-67-base.pub -x SHA256.sig ports.tar.gz
verfifed okay

tar -zxvf ports.tar.gz -C /usr/

$ cd /usr/ports
$ ls 

# cd /usr/ports/shells/fish
# make install clean all

error- Fatal: /usr/ports/pobj must be on a wxallowed filesystem (in lang/python/2.7)
/usr to "rw,nodev,wxallowed" in fstab

$pkg_add portslist
$ cd /usr/ports
$ make search key={KEY-WORD-HERE}

##########
Diable firewall
#rcctl disable pf


#############
git etc folder
Server
#pkg_add -v -i  git
#mkdir -p /git/etc
#cd /git/etc
#git init --bare

working directory
# cd /etc
# git init
# git add .
# git config user.name "Joel Carnat"
# git config user.email joel [at] carnat [dot] net
# git remote add origin /git/etc

#git commit -m "Initial: index.html" -a
#git push origin master

Remote access

# mkdir /openbsdsrv/etc
# git init
# git add .
# git config user.name "Joel Carnat"
# git config user.email joel [at] carnat [dot] net
# git config color.ui auto
# git remote add origin ssh://me@git-server.tld/git/etc
# git pull origin master
Enter passphrase for key '~/.ssh/id_rsa':
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
Depuis ssh://git-server.tld/home/git/project1
 * branch            master     -> FETCH_HEAD
 * [nouvelle branche] master     -> origin/master


 git script to commit update

# Git: add and commit changes
cd /etc && /usr/bin/git add --all && /usr/bin/git commit -m ""Commit: `date +\"%Y-%m-%d %H:%M:%S"`""
 
# send data to Git server
cd /etc && /usr/bin/git push origin master


####################

httpd.conf is required in order to activate httpd service.
# if test -e /etc/httpd.conf; touch /etc/httpd.conf; end
#nano /etc/httpd.conf

#########################
#[ MACROS ]
ext_ip = "127.0.0.1"
# ext_ip = "*"      # open to the outside network
# ext_ip = "egress" # open to only the primary IP address of the network interface

# [ GLOBAL CONFIGURATION ]
# none

# [ SERVERS ]
server "default" {
    listen on $ext_ip port 80
    root "/htdocs/my.domain"
}

# [ TYPES ]
types {
    include "/usr/share/misc/mime.types"
}

#######################


server "www.https-example.domain" { 
    alias "https-example.domain" 
    listen on $ext_ip port 80 
    listen on $ext_ip tls port 443
    tls {
        key         "/etc/ssl/private/www.https-example.domain.key"
        certificate "/etc/ssl/www.https-example.domain.crt"
    }
    root "/htdocs/www.https-example.domain" 
}

server "www.fastcgi-example.domain" {
    alias "fastcgi-example.domain"
    listen on $ext_ip port 80
    fastcgi socket ":{% port-number %}"
}



################
self sign certificate
# openssl req -x509 -sha256 -newkey rsa:2048 -keyout certificate.key -out certificate.crt -days 1024 -nodes

##############

# mkdir -p /var/www/htdocs/website01
# chown {% user %}:{% group %} /var/www/htdocs/website01 # if necessary
$ echo "Hello, world. from OpenBSD httpd" > /var/www/htdocs/website01/index.html

# rcctl enable httpd
# cat /etc/rc.conf.local
httpd_flags=
# rcctl start httpd
httpd(ok)

$ curl localhost:80
Hello, world. from OpenBSD httpd
$curl -k localhost
#curl --insecure localhost






############LAMP
Using inbuilt openbsd httpd server
inbuilt httpd -basic webserver that supports FastCGI and TLS. no gzip support (performance issue)
he projects goals can be summarized as follows:

Static files: Serves static files and directories via optional auto-indexing.
FastCGI: Supports asynchronous and direct FastCGI via UNIX socket or TCP/IP.
Secure: Non-optional security by running chroot’ed and with privilege separation by default.
SSL/TLS: Support secure connections via TLS powered by LibreSSL.
Virtual servers: Flexible configuration with support for name- and IP-based virtual servers on IPv4 and IPv6.
Reconfiguration: Reload the running configuration without interruption.
Logging: Supports per-server logging via local access and error files or via syslog.

#cp /etc/examples/httpd.conf /etc


server "example.com" {
        listen on * port 80
        location "/.well-known/acme-challenge/*" {
                root "/acme"
                request strip 2
        }
        location * {
                block return 302 "https://$HTTP_HOST$REQUEST_URI"
        }
}

server "example.com" {
        listen on * tls port 443
        tls {
                certificate "/etc/ssl/example.com.fullchain.pem"
                key "/etc/ssl/private/example.com.key"
        }
        location "/pub/*" {
                directory auto index
        }
        location "/.well-known/acme-challenge/*" {
                root "/acme"
                request strip 2
        }
}
Also
server "www.fastcgi-example.domain" {
    alias "fastcgi-example.domain"
    listen on $ext_ip port 80
    fastcgi socket ":{% port-number %}"
}

change to

#[ MACROS ]
ext_ip = "127.0.0.1"
# ext_ip = "*"      # open to the outside network
# ext_ip = "egress" # open to only the primary IP address of the network interface

# [ GLOBAL CONFIGURATION ]
# none

# [ SERVERS ]
server "default" {
    listen on $ext_ip port 80
    root "/htdocs/my.domain"
}

# [ TYPES ]
types {
    include "/usr/share/misc/mime.types"
}


make dir
 mkdir -p /var/www/htdocs/my.domain/
# chown {% user %}:{% group %} /var/www/htdocs/my.domain # if necessary
$ echo "Hello, world. from OpenBSD httpd" > /var/www/htdocs/my.domain/index.html

# rcctl enable httpd
# cat /etc/rc.conf.local
httpd_flags=
# rcctl start httpd
httpd(ok)
#curl localhost:80



# pkg_add -r mariadb-client mariadb-server 
Readme at /usr/local/share/doc/pkg-readmes/
#rcctl enable mysqld
#mysql_install_db
#rcctl start|stop|restart|check mysqld
verify
#pgrep mysqld
#ps aux | grep mysqld
#netstat -f inet -na | grep 3306
## mysql_secure_installation
unix authentication for linux account or not

edit /etc/my.cnf
bind_address=0.0.0.0
#rcctl restart mysqld

more resource by editing /etc/login.conf
mysqld:\
    :openfiles-cur=1024:\
    :openfiles-max=2048:\
    :tc=daemon:

Edit /etc/rc.conf.local
export MYSQL_HISTFILE=/dev/null   << to remove mysql history

imp:- 
The default httpd in base or nginx in port are chrooted to /var/www, so let's put the socket in /var/www/var/run/mysql/mysql.sock, so that it appears to be /var/run/mysql/mysql.sock for the chrooted web server.

Create the directory:

install -d -m 0711 -o _mysql -g _mysql /var/www/var/run/mysql

Edit /etc/my.cnf. In both the [client] section, and the [mysqld] section, change the line that reads:

socket = /var/run/mysql/mysql.sock

To:

socket = /var/www/var/run/mysql/mysql.sock

For other apps (none chroot) make soft link
 ln -s /var/www/var/run/mysql /var/run/ (ensure that /var/run/mysql doesn't exist)

To make permananet 
cp /etc/examples/rc.local /etc/ (if rc.local not exist)
echo "ln -s /var/www/var/run/mysql /var/run/" >> /etc/rc.local

Another note regarding MariaDB is the max_allowed_packet setting in /etc/my.cnf. The default value is 1M for [mysqld] section. If you encounter problems when importing a dump file from another server, try increasing it to 16M or 64M, and then restarting MariaDB. 

   webmin System configuration
Path to mysqlshow command 	/usr/local/bin/mysqlshow
Path to mysqladmin command 	/usr/local/bin/mysqladmin
Path to mysql command 	/usr/local/bin/mysql
Path to mysqldump command 	/usr/local/bin/mysqldump
Path to mysqlimport command 	/usr/local/bin/mysqlimport
Path to mysqld command 	Automatic  
Command to start MySQL server 	rcctl restart mysqld
Command to stop MySQL server 	rcctl stop mysqld  
Path to MySQL shared libraries directory 	/usr/local/lib/mysql/  
Path to MySQL databases directory 	/var/mysql 
MySQL host to connect to 	localhost  
MySQL port to connect to 	Default  
MySQL socket file 	Default  
MySQL configuration file /etc/my.cnf	














#apt install phpMyAdmin (based on php7.3)
#php php-curl php-mysqli pecl73-mcrypt pecl73-imagick 

 using php7.3
 
 cp /etc/php-7.3.sample/* /etc/php-7.3/.
 OR
 ln -sf /etc/php-7.3.sample/* /etc/php-7.3/. 

>>>>>>>>>>> for apache_httpd
Enable mod_php by symlinking the sample php-7.4.conf to the /var/www/conf/modules directory.
ln -sf /var/www/conf/modules.sample/php-7.3.conf /var/www/conf/modules


Enable php-fpm
#rcctl enable/start   php73_fpm

#nano /etc/httpd
server "default" {
    listen on * port 80
    root "/htdocs/web1"

#types {
#    include "/usr/share/misc/mime.types"
#}

location "*.php*" {
            fastcgi socket "/run/php-fpm.sock"
    }
}


************************************************
Installing webmin

in dependenices
pkg_add -r p5-Authen-NTLM p5-BSD-Resource p5-Crypt-SSLeay p5-HTML-Parser p5-HTML-Tagset p5-IO-Socket-SSL p5-IO-Tty p5-ldap p5-libwww p5-Locale-gettext p5-Net-OpenSSH p5-Net-SSH2 p5-Net-SSLeay p5-Test-Exception p5-XML-Filter-BufferText

perl -MCPAN -e 'install Crypt::UnixCrypt'
perl -MCPAN -e 'install Authen::Libwrap'  (fail due to tcpd.h)
perl -MCPAN -e 'install Authen::Libwrap'  (fail due to tcpd.h)
pkg_add -r p5-DBD-Pg p5-DBD-mysql



cd /usr/local/
ftp http://prdownloads.sourceforge.net/webadmin/webmin-1.955.tar.gz
tar zxvf webmin-1.955.tar.gz
cd webmin-1.955
./setup.sh
Webmin > Webmin Configuration > start at boot time - yes

manually
/etc/webmin/start
/etc/webmin/stop

webmin > other/tools > perl modules
from url install 
<<ISSUE>>http://www.cpan.org/authors/id/D/DM/DMUEY/Authen-Libwrap-0.23.tar.gz or tcph.d support
http://www.cpan.org/authors/id/G/GA/GAAS/Encode-Locale-1.05.tar.gz
http://www.cpan.org/authors/id/G/GA/GAAS/Net-HTTP-6.06.tar.gz
http://www.cpan.org/authors/id/S/SA/SADAHIRO/String-Multibyte-1.12.tar.gz


*************************************************************************

Install ftpd
inbuilt package
to check
#rcctl check ftpd
to enable
# rcctl enable ftpd
to check
# cat /etc/rc.conf.local
ftpd_flags=
to start
## rcctl start ftpd

************************************************************
Email Server

opensmtp
#pkg_add opensmtpd-extras opensmtpd-filter-rspamd dovecot dovecot-pigeonhole rspamd redis

#cd /etc/mail
#mv smtpd.conf smtpd.conf.default


**************************************************
pf firewall

edit /etc/rc.conf.local
pf=YES                # enable PF
pf_rules=/etc/pf.conf # specify which file contains your rules


Basic rule for single machine (console access)
>>>>>>>>>>>>>>
block in all
pass out all keep state

>>>>>>>>>>>>>>>



# vim: set ft=pf
# /usr/local/etc/pf.conf
 
## Set your public interface ##
ext_if="vtnet0"
 
## Set your server public IP address ##
ext_if_ip="172.xxx.yyy.zzz"
 
## Set and drop these IP ranges on public interface ##
martians = "{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, \
          10.0.0.0/8, 169.254.0.0/16, 192.0.2.0/24, \
          0.0.0.0/8, 240.0.0.0/4 }"
 
## Set http(80)/https (443) port here ##
webports = "{http, https}"
 
## enable these services ##
int_tcp_services = "{domain, ntp, smtp, www, https, ftp, ssh}"
int_udp_services = "{domain, ntp}"
 
## Skip loop back interface - Skip all PF processing on interface ##
set skip on lo
 
## Sets the interface for which PF should gather statistics such as bytes in/out and packets passed/blocked ##
set loginterface $ext_if
 
## Set default policy ##
block return in log all
block out all
 
# Deal with attacks based on incorrect handling of packet fragments 
scrub in all
 
# Drop all Non-Routable Addresses 
block drop in quick on $ext_if from $martians to any
block drop out quick on $ext_if from any to $martians
 
## Blocking spoofed packets
antispoof quick for $ext_if
 
# Open SSH port which is listening on port 22 from VPN 139.xx.yy.zz Ip only
# I do not allow or accept ssh traffic from ALL for security reasons 
pass in quick on $ext_if inet proto tcp from 139.xxx.yyy.zzz to $ext_if_ip port = ssh flags S/SA keep state label "USER_RULE: Allow SSH from 139.xxx.yyy.zzz"
## Use the following rule to enable ssh for ALL users from any IP address #
## pass in inet proto tcp to $ext_if port ssh
### [ OR ] ###
## pass in inet proto tcp to $ext_if port 22 
 
# Allow Ping-Pong stuff. Be a good sysadmin 
pass inet proto icmp icmp-type echoreq
 
# All access to our Nginx/Apache/Lighttpd Webserver ports 
pass proto tcp from any to $ext_if port $webports
 
# Allow essential outgoing traffic 
pass out quick on $ext_if proto tcp to any port $int_tcp_services
pass out quick on $ext_if proto udp to any port $int_udp_services
 
# Add custom rules below

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


postgress install
